Palindrome Checking
    - check if a string reads the same forward and backwards
    - [HOW] initiates pointers at both ends and compare while moving towards the center

Sorted Arrays
    - provides a way to eliminate possibilities 
    - [HOW] initiates pointers at both ends and decide which direction to move the pointers efficiently
    - reduces the time complexity to O(n) or O(nlogn) compared to O(n^2) for brute force approach
    - ex. (i) smallest difference (adjacent elements) + largest difference (first and last elements)

Merging/Comparing Sorted Lists
    - allows for sequential (correct order) traversal of both lists
    - [HOW] initiates pointers at the start of both lists and increment them based on an order
    - maintains order -> merged/compared output remains in same order as input

Q: when should we consider sorting for two pointers? 
A: (i) order of elements do not need to be preserved
   (ii) minimize or maximize differences

Reversing Arrays In-Place
    - [HOW] initiates pointers at both ends and swap while moving towards the center

Reversal Algorithm for Array Rotation:
    (1) assume that we want to rotate an array by k positions
        ex. [1, 2, 3, 4, 5] -> [4, 5, 1, 2, 3] where k = 2
    (2) reverse the entire array
        ex. [1, 2, 3, 4, 5] -> [5, 4, 3, 2, 1]
        - we want the last k elements to be the first k elements!!!
    (3) reverse the first k elements and the remaining elements
        ex. [4, 5] + [1, 2, 3] -> [4, 5, 1, 2, 3]
        - reverse subarrays independently to achieve original ordering